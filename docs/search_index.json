[
["index.html", "Data Analysis with Linear Regression Chapter 1 Preliminaries", " Data Analysis with Linear Regression Joshua French 2021-01-21 Chapter 1 Preliminaries I recommend you execute the following commands install packages we may use in this course. # packages related to books books = c(&quot;faraway&quot;, &quot;alr4&quot;, &quot;car&quot;, &quot;rms&quot;) install.packages(books) # packages related to tidy/tidying data tidy = c(&quot;broom&quot;, &quot;tidyr&quot;, &quot;dplyr&quot;) install.packages(tidy) # packages related to plotting moreplots = c(&quot;ggplot2&quot;, &quot;ggthemes&quot;, &quot;lattice&quot;, &quot;HH&quot;) install.packages(moreplots) # packages related to model diagnostics diag = c(&quot;leaps&quot;, &quot;lmtest&quot;, &quot;gvlma&quot;, &quot;caret&quot;, &quot;perturb&quot;) install.packages(diag) Acknowledgments The bookdown package (Xie 2020) was used to generate this book. References "],
["r-foundations.html", "Chapter 2 R Foundations 2.1 What is R? 2.2 Where to get R (and R Studio Desktop) 2.3 R Studio Layout 2.4 Running code, scripts, and comments 2.5 Packages 2.6 Getting help 2.7 Data types and structures 2.8 Assignment 2.9 Vectors 2.10 Helpful functions 2.11 Data Frames 2.12 Logical statements 2.13 Subsetting with logical statements 2.14 Ecosystem debate", " Chapter 2 R Foundations Meaningful data analysis requires the use of computer software. In this course, we will utilize R. In what follows, I will attempt to lay a foundation of key components of R that you will need for data analysis. I make no attempt to be exhaustive, and many other important components of R (like plotting) will be discussed later, as needed. 2.1 What is R? R is programming language and environment designed for statistical computing. It was introduced by Robert Gentleman and Robert Ihaka in 1993. It is modeled after the S programming language. R is free, open source, and runs on Windows, Macs, Linux, and other types of computers. R is an interactive programming language You type and execute a command in the Console for immediate feedback in contrast to a compiled programming language, which compiles a program that is then executed. R is highly extendable. Many user-created packages are available to extend the functionality beyond what is installed by default. Users can write their own functions and easily add software libraries to R. 2.2 Where to get R (and R Studio Desktop) R may be downloaded from the R Project’s website. This link should bring you to the relevant page for downloading the software. R Studio Desktop is a free “front end” for R provided by R Studio. R Studio Desktop makes doing data science with R much easier by adding an Integrated Development Environment (IDE) and providing many other features. Currently, you may download R Studio at this link. You may need to navigate the R Studio website directly if this link no longer functions. Install R and R Studio Desktop before continuing. Then open R Studio Desktop as you continue to learn about R. 2.3 R Studio Layout R Studio Desktop has four panes: Console: the pane where the code is executed. Source: the pane where you prepare commands to be executed. Environment/History: the pane where you can see all the objects in your workspace, your command history, and other things. The Files/Plot/Packages/Help: the pane where you navigate between directories, where plots can be viewed, where you can see the packages available to be loaded, and where you can get help. RStudio panes 2.4 Running code, scripts, and comments Code is executed in R by typing it in the Console and hitting enter. Instead of typing all of your code in the Console and hitting enter, it’s better to write your code in a Script and execute the code separately. A new script can be obtained by executing File -&gt; New File -&gt; R Script or pressing “Ctrl + Shift + n” (on a PC) or “Cmd + Shift + n” on a Mac. There are various ways to run code from a Script file. The most common ones are: Highlight the code you want to run and hit the Run button at the top of the Script pane. Highlight the code you want to run and press “Ctrl + Enter” on your keyboard. If you don’t highlight anything, by default, R Studio runs the command the cursor currently lies on. To save a script, click File -&gt; Save or press “Ctrl + s” (on a PC) or “Cmd + s” (on a Mac). A comment is a set of text ignored by R when submitted to the Console. A comment is indicated by the # symbol. Nothing to the right of the # is executed in the Console. To comment (or uncomment) multiple lines in R, highlight the code you want to comment and press “Ctrl + Shift + c” on a PC or “Cmd + Shift + c” on a Mac. 2.4.1 Example Perform the following tasks: Type 1+1 in the Console and hit enter. Open a new Script in R Studio. mean(1:3) in your Script file. Type # mean(1:3) in your Script file. Run the commands from the Script using an approach mentioned above. 2.5 Packages Packages are collections of functions, data, and other objects that extend the functionality installed by default in R. R packages can be installed using the install.packages function and loaded using the library function. 2.5.1 Example Practice installing and loading a package by doing the following: Install the set of faraway package by executing the command install.packages(\"faraway\"). Load the faraway package by executing the command library(faraway). 2.6 Getting help There are a number of helps to get help in R. If you know the command for which you want help, then exectue ?command in the Console. * e.g., ?lm * This also may work with data sets, package names, object classes, etc. If you want to search the documentation for a certain topic, then execute ??topic in the Console. * If you need help deciphering an error, identifying packages to perform a certain analysis, how to do something better, then a web search is likely to help. 2.6.1 Example Do the following: 1. Execute ?lm in the Console to get help on the lm function, which is one of the main functions used for fitting linear models. 2. Execute ??logarithms in the Console to search the R documentation for information about logarithms. 3. Do a web search for something along the lines of “How do I change the size of the axis labels in an R plot?”. 2.7 Data types and structures 2.7.1 Basic data types R has 6 basic (“atomic”) vector types: character - collections of characters. E.g., \"a\", “hello world!” double - decimal numbers. e.g., 1.2, 1.0 integer - whole numbers. In R, you must add L to the end of a number to specify it as an integer. E.g., 1L is an integer but 1 is a double. logical - boolean values, TRUE and FALSE complex - complex numbers. E.g., 1+3i raw - a type to hold raw bytes. The typeof function returns the R internal type or storage mode of any object. Consider the following commands and output: typeof(1) ## [1] &quot;double&quot; typeof(1L) ## [1] &quot;integer&quot; typeof(&quot;hello world!&quot;) ## [1] &quot;character&quot; 2.7.2 Other important object types There are other important types of objects in R that are not basic. We will discuss a few. The R Project manual provides additional information about available types. 2.7.2.1 Numeric An object is numeric if it is of type integer or double. In that case, it’s mode is said to be numeric. The is.numeric function tests whether an object can be interpreted as numbers. We can use it to determine whether an object is numeric. Some examples: is.numeric(&quot;hello world!&quot;) ## [1] FALSE is.numeric(1) ## [1] TRUE is.numeric(1L) ## [1] TRUE 2.7.2.2 NULL NULL is a special object to indicate the object is absent. An object having a length of zero is not the same thing as an object being absent. 2.7.2.3 NA A “missing value” occurs when the value of something isn’t known. R uses the special object NA to represent missing value. If you have a missing value, you should represent that value as NA. Note: \"NA\" is not the same thing as NA. 2.7.2.4 Functions A function is an object the performs a certain action or set of actions based on objects it receives from its arguments. 2.7.3 Data structures R operates on data structures. A data structure is simply some sort of “container” that holds certain kinds of information R has 5 basic data structures: vector matrix array data frame list Vectors, matrices, and arrays are homogeneous objects that can only store a single data type at a time. Data frames and lists can store multiple data types. Vectors and lists are considered one-dimensional objects. A list is technically a vector. Vectors of a single type are atomic vectors. (https://cran.r-project.org/doc/manuals/r-release/R-lang.html#List-objects) Matrices and data frames are considered two-dimensional objects. Arrays can be n-dimensional objects. This is summarized in the table below, which is based on a table in the first edition of Hadley Wickham’s Advanced R. dimensionality homogeneous heterogeneous 1d vector list 2d matrix data frame nd array 2.8 Assignment To store a data structure in the computer’s memory we must assign it a name. Data structures can be stored using the assignment operator &lt;- or =. Some comments: In general, both &lt;- and = can be used for assignment. Pressing the “Alt” and “-” keys simultaneously on a PC or Linux machine (Option and - on a Mac) will insert &lt;- into the R console and script files (but not in R Markdown for some reason). &lt;- and = are NOT synonyms, but can be used identically most of the time. It’s safest to use &lt;- for assignment. Once an object has been assigned a name, it can be printed by executing the name of the object or using the print function. 2.8.1 Example In the following code, we compute the mean of a vector and print the result. # compute the mean of 1, 2, ..., 10 and assign the name m m &lt;- mean(1:10) m # print m ## [1] 5.5 print(m) # print m a different way ## [1] 5.5 2.9 Vectors A vector is a single-dimensional set of data of the same type. 2.9.1 Creation The most basic way to create a vector is the c function. The c function combines values into a vector or list. e.g., the following commands create vectors of type numeric, character, and logical, respectively. c(1, 2, 5.3, 6, -2, 4) c(\"one\", \"two\", \"three\") c(TRUE, TRUE, FALSE, TRUE) 2.9.2 Creating patterned vectors R provides a number of functions for creating vectors following certain consistent patterns. The seq (sequence) function is used to create an equidistant series of numeric values. Some examples: seq(1, 10): A sequence of numbers from 1 to 10 in increments of 1. 1:10: A sequence of numbers from 1 to 10 in increments of 1. seq(1, 20, by = 2): A sequence of numbers from 1 to 20 in increments of 2. seq(10, 20, len = 100): A sequence of numbers from 10 to 20 of length 100. The rep (replicate) function can be used to create a vector by replicating values. Some examples: rep(1:3, times = 3): Repeat the sequence 1, 2, 3 three times in a row. rep(c(\"trt1\", \"trt2\", \"trt3\"), times = 1:3): Repeat “trt1” once, “trt2” twice, and “trt3” three times. rep(1:3, each = 3): Repeat each element of the sequence 1, 2, 3 three times. 2.9.3 Example Execute the following commands above in the Console to see what you get. # vector creation c(1, 2, 5.3, 6, -2, 4) c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;) c(TRUE, TRUE, FALSE, TRUE) # sequences of values seq(1, 10) 1:10 seq(1, 20, by = 2) seq(10, 20, len = 100) # replicated values rep(1:3, times = 3) rep(c(&quot;trt1&quot;, &quot;trt2&quot;, &quot;trt3&quot;), times = 1:3) rep(1:3, each = 3) Vectors can be combined into a new object using the c. 2.9.4 Example Execute the following commands in the Console v1 &lt;- 1:5 # create a vector v1 # print the vector ## [1] 1 2 3 4 5 print(v1) ## [1] 1 2 3 4 5 v2 &lt;- c(1, 10, 11) # create a new vector new &lt;- c(v1, v2) # combine and assign the combined vectors new # print the combined vector ## [1] 1 2 3 4 5 1 10 11 2.9.5 Categorical vectors Categorical data should be stored as a factor in R. The factor function takes values that can be coerced to a character and converts them to an object of class factor. Some examples: f1 &lt;- factor(rep(1:6, times = 3)) f1 ## [1] 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 ## Levels: 1 2 3 4 5 6 f2 &lt;- factor(c(&quot;a&quot;, 7, &quot;blue&quot;, &quot;blue&quot;, FALSE)) f2 ## [1] a 7 blue blue FALSE ## Levels: 7 a blue FALSE 2.9.6 Example Create a vector named grp that has two levels: a and b, where the first 7 values are a and the second 4 values are b. 2.9.7 Extracting parts of a vector Subsets of the elements of a vector can be extracted by appending an index vector in square brackets [] to the name of the vector . Let’s create the numeric vector 2, 4, 6, 8, 10, 12, 14, 16. a &lt;- seq(2, 16, by = 2) a ## [1] 2 4 6 8 10 12 14 16 Let’s access the 2nd, 4th, and 6th elements of a. a[c(2, 4, 6)] ## [1] 4 8 12 Let’s access all elements in a EXCEPT the 2nd, 4th, and 6th using the minus (-) sign in front of the index vector. a[-c(2, 4, 6)] ## [1] 2 6 10 14 16 Let’s access all elements in a except elements 3 through 6. a[-(3:6)] ## [1] 2 4 14 16 2.10 Helpful functions 2.10.1 General functions Some general functions commonly used to describe data objects: length(x): length of x sum(x): sum elements in x mean(x): sample mean of elements in x var(x): sample variance of elements in x sd(x): sample standard deviation of elements in x range(x): range (minimum and maximum) of elements in x log(x): (natural) logarithm of elements in x summary(x): a summary of x. Output changes depending on the class of x. str(x): provides information about the structure of x. Usually, the class of the object and some information about its size. 2.10.2 Example Run the following commands in the Console: x &lt;- rexp(100) # sample 100 iid values from an Exponential(1) distribution length(x) # length of x sum(x) # sum of x mean(x) # sample mean of x var(x) # sample variance of x sd(x) # sample standard deviation of x range(x) # range of x log(x) # logarithm of x summary(x) # summary of x str(x) # structure of x 2.10.3 Functions related to statistical distributions Suppose that a random variable \\(X\\) has the dist distribution: p[dist](q, ...): returns the cdf of \\(X\\) evaluated at q, i.e., \\(p=P(X\\leq q)\\). q[dist](p, ...): returns the inverse cdf (or quantile function) of \\(X\\) evaluated at \\(p\\), i.e., \\(q = \\inf\\{x: P(X\\leq x) \\geq p\\}\\). d[dist](x, ...): returns the mass or density of \\(X\\) evaluated at \\(x\\) (depending on whether it’s discrete or continuous). r[dist](n, ...): returns an i.i.d. random sample of size n having the same distribution as \\(X\\). The ... indicates that additional arguments describing the parameters of the distribution may be required. 2.10.4 Example Execute the following commands in R to see the output. What is each command doing? pnorm(1.96, mean = 0, sd = 1) qunif(0.6, min = 0, max = 1) dbinom(2, size = 20, prob = .2) dexp(1, rate = 2) rchisq(100, df = 5) pnorm(1.96, mean = 0, sd = 1) returns the probability that a standard normal random variable is less than or equal to 1.96, i.e., \\(P(X \\leq 1.96)\\). qunif(0.6, min = 0, max = 1) returns the value \\(x\\) such that \\(P(X\\leq x) = 0.6\\) for a uniform random variable on the interval \\([0, 1]\\). dbinom(2, size = 20, prob = .2) returns the probability that \\(P(X=2)\\) for \\(X∼\\textrm{Binom}(n=20,\\pi=0.2)\\). dexp(1, rate = 2) evaluates the density of an exponential random variable with mean = 1/2 at \\(x=1\\). rchisq(100, df = 5) returns a sample of 100 observations from a chi-squared random variable with 5 degrees of freedom. 2.11 Data Frames Data frames are two-dimensional data objects. Each column of a data frame is a vector (or variable) of possibly different data types. This is a fundamental data structure used by most of R’s modeling software. In general, I recommend tidy data, which means that each variable forms a column of the data frame, and each observation forms a row. 2.11.1 Creation Data frames are created by passing vectors into the data.frame function. The names of the columns in the data frame are the names of the vectors you give the data.frame function. Consider the following simple example. d &lt;- c(1, 2, 3, 4) e &lt;- c(&quot;red&quot;, &quot;white&quot;, &quot;blue&quot;, NA) f &lt;- c(TRUE, TRUE, TRUE, FALSE) df &lt;- data.frame(d,e,f) df ## d e f ## 1 1 red TRUE ## 2 2 white TRUE ## 3 3 blue TRUE ## 4 4 &lt;NA&gt; FALSE The columns of a data frame can be renamed using the names function on the data frame. names(df) &lt;- c(&quot;ID&quot;, &quot;Color&quot;, &quot;Passed&quot;) df ## ID Color Passed ## 1 1 red TRUE ## 2 2 white TRUE ## 3 3 blue TRUE ## 4 4 &lt;NA&gt; FALSE The columns of a data frame can be named when you are first creating the data frame by using name = for each vector of data. df2 &lt;- data.frame(ID = d, Color = e, Passed = f) df2 ## ID Color Passed ## 1 1 red TRUE ## 2 2 white TRUE ## 3 3 blue TRUE ## 4 4 &lt;NA&gt; FALSE 2.11.2 Extracting parts of a data frame The column vectors of a data frame may be extracted using $ and specifying the name of the desired vector. df$Color would access the Color column of data frame df. Part of a data frame can also be extracted by thinking of at as a general matrix and specifying the desired rows or columns in square brackets after the object name. For example, if we had a data frame named df: df[1,] would access the first row of df. df[1:2,] would access the first two rows of df. df[,2] would access the second column of df. df[1:2, 2:3] would access the information in rows 1 and 2 of columns 2 and 3 of df. If you need to select multiple columns of a data frame by name, you can pass a character vector with column names in the column position of []. df[, c(\"Color\", \"Passed\")] would extract the Color and Passed columns of df. ### Example {.example} Execute the following commands in the Console: df3 &lt;- data.frame(numbers = 1:5, characters = letters[1:5], logicals = c(TRUE, TRUE, FALSE, TRUE, FALSE)) df3 # print df df3$logicals # access the logicals vector of df3 df3[1, ] # access the first column of df3 df3[, 3] # access the third column of df3 df3[, 2:3] # access the column 2 and 3 of df3 df3[, c(&quot;numbers&quot;, &quot;logicals&quot;)] # access the numbers and logical columns of df3 Students often can work more conveniently with vectors, so it is sometimes desirable to access a part of a data frame and assign it a new name for later use. For example, to access the ID column of df2 and assign it the name newID, we could execute newID &lt;- df2$ID. 2.11.3 Importing Data The read.table function imports data from file into R as a data frame. Usage: read.table(file, header = TRUE, sep = \",\") file is the file path and name of the file you want to import into R. If you don’t know the file path, set file = file.choose() will bring up a dialog box asking you to locate the file you want to import. header specifies whether the data file has a header (variable labels for each column of data in the first row of the data file). If you don’t specify this option in R or use header = FALSE, then R will assume the file doesn’t have any headings. header = TRUE tells R to read in the data as a data frame with column names taken from the first row of the data file. sep specifies the delimiter separating elements in the file. If each column of data in the file is separated by a space, then use sep = \" \" If each column of data in the file is separated by a comma, then use sep = \",\" If each column of data in the file is separated by a tab, then use sep = \"\\t\". Here is an example reading a csv (comma separated file) with a header: dtf &lt;- read.table(file = &quot;https://raw.githubusercontent.com/jfrench/DataWrangleViz/master/data/covid_dec4.csv&quot;, header = TRUE, sep = &quot;,&quot;) str(dtf) ## &#39;data.frame&#39;:\t50 obs. of 7 variables: ## $ state_name: chr &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ... ## $ state_abb : chr &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; ... ## $ deaths : int 3831 142 6885 2586 19582 2724 5146 782 19236 9725 ... ## $ population: num 387000 96500 498000 238000 2815000 ... ## $ income : int 25734 35455 29348 25359 31086 35053 37299 32928 27107 28838 ... ## $ hs : num 82.1 91 85.6 82.9 80.7 89.7 88.6 87.7 85.5 84.3 ... ## $ bs : num 21.9 27.9 25.9 19.5 30.1 36.4 35.5 27.8 25.8 27.3 ... Note that the read_table function in the readr package and the fread function in the data.table package are perhaps better ways of reading in tabular data and use similar syntax. 2.12 Logical statements 2.12.1 Basic comparisons Sometimes we need to know if the elements of an object satisfy certain conditions. This can be determined using the logical operators &lt;, &lt;=, &gt;, &gt;=, ==, !=. == means equal to. != means NOT equal to. 2.12.2 Example Execute the following commands in R and see what you get. What is each statement performing? # a &lt;- seq(2, 16, by = 2) # creating the vector a a a &gt; 10 a &lt;= 4 a == 10 a != 10 2.12.3 And and Or statements More complicated logical statements can be made using &amp; and |. &amp; means “and” | means “or” 2.12.4 Example Execute the following commands in R and see what you get. (a &gt; 6) &amp; (a &lt;= 10) (a &lt;= 4) | (a &gt;= 12) 2.13 Subsetting with logical statements Logical statements can be used to return parts of an object satisfying the appropriate criteria. Specifically, we pass logical statements within the square brackets used to access part of a data structure. 2.13.1 Example Execute the following code: a a &lt; 6 a[a &lt; 6] a == 10 a[a == 10] (a &lt; 6) | ( a == 10) a[(a &lt; 6) | ( a == 10)] 2.14 Ecosystem debate We will typically work with base R, which are commands and functions R offers by default. The tidyverse (www.tidyverse.org) is a collection of R packages that provides a unified framework for data manipulation and visualization. Since this course focuses more on modeling than data manipulation, I will typically focus on approaches in base R. I will use functions from the tidyverse when it greatly simplifies analysis, data manipulation, or visualization. "],
["literature.html", "Chapter 3 Literature", " Chapter 3 Literature Here is a review of existing methods. "],
["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],
["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]
